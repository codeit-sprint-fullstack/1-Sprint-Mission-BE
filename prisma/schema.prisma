// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(uuid())
  email             String   @unique
  nickname          String
  image             String?
  encryptedPassword String
  refreshToken      String?
  provider          String?  @default("local")
  providerId        String?  @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  comments Comment[]
  articles Article[]
  products Product[]

  likedArticles    Article[] @relation("ArticleLike")
  favoriteProducts Product[] @relation("ProductFavorite")
}

model Product {
  id            String   @id @default(uuid())
  name          String
  description   String
  images        String[] @default([])
  price         Int
  tags          String[] @default([])
  favoriteCount Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  ownerId       String
  owner         User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  favoriteUsers User[]    @relation("ProductFavorite")
  comments      Comment[]
}

model Article {
  id        String   @id @default(uuid())
  title     String
  image     String?
  likeCount Int      @default(0)
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  writerId  String
  writer    User     @relation(fields: [writerId], references: [id], onDelete: Cascade)

  likedUsers User[]    @relation("ArticleLike")
  comments   Comment[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  writerId  String
  articleId String?
  productId String?

  writer  User     @relation(fields: [writerId], references: [id], onDelete: Cascade)
  article Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
}
