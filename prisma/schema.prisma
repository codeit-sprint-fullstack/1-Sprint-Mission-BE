// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 중고마켓 게시글 모델 스키마
model MarketPost {
  id              Int      @id @default(autoincrement())
  name            String   // 상품명
  description     String   // 상품 설명
  price           Int      // 가격
  tags            String[] // 태그 배열
  images          String[] // 이미지 URL 배열
  ownerId         Int      // 소유자 ID
  favoriteCount   Int      @default(0) // 찜 개수
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  ownerNickname   String   // 소유자 닉네임
  isFavorite      Boolean   @default(false) // 찜 여부
  comments        Comment[] @relation("MarketComments") // 댓글과의 관계 추가
}

// 자유게시판 게시글 모델 스키마
model Article {
  id        Int      @id @default(autoincrement())
  title     String   
  content   String
  likeCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    String   
  imageUrl  String?
  comments  Comment[] @relation("ArticleComments") // 댓글과의 관계 설정
}

model Comment {
  id          Int       @id @default(autoincrement())
  content     String
  articleId   Int?      // 자유게시판 게시글 외래키
  marketPostId Int?      // 중고마켓 게시글 외래키
  boardType   boardType @default(board)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int       // 사용자 ID 필드를 필수로 변경

  article     Article?   @relation("ArticleComments", fields: [articleId], references: [id], onDelete: Cascade)
  marketPost  MarketPost? @relation("MarketComments", fields: [marketPostId], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [userId], references: [id]) // 사용자와의 관계 추가
  
  @@unique([id, boardType])
}


// 사용자 모델 스키마
model User {
  id               Int      @id @default(autoincrement())
  email            String   @unique
  nickname         String   @unique
  image            String?  // 이미지 URL
  encryptedPassword String
  googleId         String?  @unique // Google ID 추가
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  comments         Comment[] // 사용자와의 댓글 관계 추가
  refreshTokens    RefreshToken[] // 사용자와의 리프레시 토큰 관계 추가
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // User와의 관계 설정
}

// 자유게시판 댓글인지 중고마켓 댓글인지 'board', 'market' 로 구분
enum boardType {
  board
  market
}