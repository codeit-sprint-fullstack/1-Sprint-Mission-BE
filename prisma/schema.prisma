// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  nickname  String
  password  String
  image     String?   // 프로필 이미지 (선택적)
  products  Product[] // 유저가 등록한 상품
  articles  Article[] // 유저가 작성한 게시글
  comments  Comment[] // 유저가 작성한 댓글
  likes     Like[]    // 유저가 남긴 좋아요
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  price       Int
  image       String[]
  tags        String[]
  comments    Comment[] @relation("ProductComments")
  likes       Like[]    // 좋아요 연결
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int?
  user        User?     @relation(fields: [userId], references: [id])
}


model Article {
  id          Int       @id @default(autoincrement())
  title       String
  content     String
  image       String[]   // 게시글 이미지 경로
  tags        String[]
  comments    Comment[] @relation("ArticleComments")
  likes       Like[]    // 좋아요 연결
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int?
  user        User?     @relation(fields: [userId], references: [id])
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  productId Int?
  product   Product?  @relation("ProductComments", fields: [productId], references: [id])
  articleId Int?
  article   Article?  @relation("ArticleComments", fields: [articleId], references: [id])
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  productId Int?
  product   Product? @relation(fields: [productId], references: [id])
  articleId Int?
  article   Article? @relation(fields: [articleId], references: [id])
  createdAt DateTime @default(now())
}

