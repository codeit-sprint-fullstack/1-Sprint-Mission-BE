datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                Int       @id @default(autoincrement())
  email             String    @unique
  nickname          String
  image             String?
  encryptedPassword String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  products          Product[]
  articles          Article[]
  comments          Comment[]
  auth              Auth[]
}

model Product {
  id            Int       @id @default(autoincrement())
  name          String
  description   String
  price         Int
  tags          String[]
  images        String[]
  favoriteCount Int?      @default(0)
  isFavorite    Boolean?  @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  ownerId       Int
  ownerNickname String
  user          User      @relation(fields: [ownerId], references: [id])
  comments      Comment[]
}

model Article {
  id            Int       @id @default(autoincrement())
  title         String
  content       String
  images        String[]
  favoriteCount Int       @default(0)
  isFavorite    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        Int
  user          User      @relation(fields: [userId], references: [id])
  comments      Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  productId Int?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  articleId Int?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
}

model Auth {
  id              Int      @id @default(autoincrement())
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  accessToken     String
  refreshToken    String   @unique
  accessTokenExp  DateTime
  refreshTokenExp DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
