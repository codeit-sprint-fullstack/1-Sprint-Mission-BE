// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  nickname          String?
  email             String    @unique
  encryptedPassword String?
  image             String?
  createdAt         DateTime  @default(now())
  articles          Article[]
  comment           Comment[]
  poducts           Product[]
  like              Like[]
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  price       Int
  tags        String[]
  images      String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  ownerId     Int?
  comment     Comment[]
  owner       User?     @relation(fields: [ownerId], references: [id])
  like        Like[]
}

model Article {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  count     Int       @default(0)
  comment   Comment[]
  user      User?     @relation(fields: [userId], references: [id])
  userId    Int?
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?

  @@index([userId])
  @@index([articleId])
  @@index([productId])
}

model Like {
  id        Int @id @default(autoincrement())
  userId    Int
  productId Int

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId]) // userId와 productId의 조합은 고유해야 함
}
